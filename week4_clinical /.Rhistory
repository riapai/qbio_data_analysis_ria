library(pacman)
}
p_load(rbenchmark)
p_load(tidyverse)
theme_set(
theme_bw() +
theme(legend.position = "top")
)
x = 3
age <- 18
x = 3
age <- 18
x = 3
age = 18
x = 3
var_age = 18
x = 3
age = 18
x = 3
age = 18
birthday = 11/02/2002
x = 3
age = 18
birthday = "11/02/2002"
var_string = "red"
var_num <- 3
var_vector = c(1, 2, 3) # a vector -- see more later
var_list = list(var_string, var_vector, 82)  # a list can have basically anything in it
x = 5
y = 7
sum(x, y)
x + y  # this is the same
z = sum(x, y)
z
list_of_numbers = c(1, 3, 4, 8, 1, 44, -3)
MIN = min(list_of_numbers)
MAX = max(list_of_numbers)
MIN
MAX
graph_parabola = function(a, b, c){
curve(a*x^2 + b*x + c, xlim = c(-5, 5), ylim = c(-5, 5), col = "blue")
# there is no return statement -- the output is in the plot window!
}
graph_parabola(1, 4, 3) # much easier than typing the above code!
install.packages("BiocManager")
library(BiocManager)
BiocManager :: install("TCGAbiolinks")
install.packages("BiocManager")
library(BiocManager)
BiocManager :: install("TCGAbiolinks")
library(TCGAbiolinks)
getwd(clin_query)
clin_query <- GDCquery(project = "TCGA-STAD", data.category = "Clinical", file.type = "xml")
GDCdownload( clin_query ) #Only use this line ONCE! Comment out after you have downloaded the data.
clinic <- GDCprepare_clinic(clin_query, clinical.info = "patient")
names( clinic )[names(clinic)=="days_to_last_followup"] <- "days_to_last_follow_up" #This fixes an error in the name of the column
getwd(clin_query)
install.packages("BiocManager")
library(BiocManager)
BiocManager :: install("TCGAbiolinks")
library(TCGAbiolinks)
force = TRUE
getwd(clin_query)
View(clin_query)
colnames(clinic)
clinic$vital_status
clinic$"fill in here" #choose another column to look at. When filling in, you can remove the quotation marks
clinic$vital_status[1:5] #this shows the vital_status column for the first 5 patients
head( clinic$"fill in here" ) #What does this do?
colnames(clinic)
clinic$vital_status
clinic$ethnicity #choose another column to look at. When filling in, you can remove the quotation marks
clinic$vital_status[1:5] #this shows the vital_status column for the first 5 patients
head( clinic$"fill in here" ) #What does this do?
getwd(clin_query) #line not working
clin_query <- GDCquery(project = "TCGA-STAD", data.category = "Clinical", file.type = "xml")
GDCdownload( clin_query ) #Only use this line ONCE! Comment out after you have downloaded the data.
clinic <- GDCprepare_clinic(clin_query, clinical.info = "patient")
names( clinic )[names(clinic)=="days_to_last_followup"] <- "days_to_last_follow_up" #This fixes an error in the name of the column
View(clin_query)
getwd(clin_query) #line not working
colnames(clinic)
#clinic$vital_status
#clinic$ethnicity #choose another column to look at. When filling in, you can remove the quotation marks
#clinic$vital_status[1:5] #this shows the vital_status column for the first 5 patients
#head( clinic$"fill in here" ) #What does this do?
plot( clinic$age_at_initial_pathologic_diagnosis, clinic$"fill in weight column name", xlab = age, ylab = weight, main = Age vs. Weight in patients with stomach cancer)
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
par(mar=c(10,1,1,1))
boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = age, ylab = race, main = age and race of patients with stomach cancer, las = 2, cex.axis = 0.5)
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
par(mar=c(10,1,1,1))
boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = age, ylab = race, main = "age and race of patients with stomach cancer", las = 2, cex.axis = 0.5)
plot( clinic$age_at_initial_pathologic_diagnosis, clinic$number_of_relatives_with_stomach_cancer, xlab = age, ylab = weight, main = Age vs Weight in patients with stomach cancer)
plot( clinic$age_at_initial_pathologic_diagnosis, clinic$number_of_relatives_with_stomach_cancer, xlab = age, ylab = weight, main = Age versus Weight)
plot( clinic$age_at_initial_pathologic_diagnosis, clinic$number_of_relatives_with_stomach_cancer, xlab = age, ylab = weight)
plot( clinic$age_at_initial_pathologic_diagnosis, clinic$number_of_relatives_with_stomach_cancer, xlab = age, ylab = relatives with stomach cancer)
plot( clinic$age_at_initial_pathologic_diagnosis, clinic$number_of_relatives_with_stomach_cancer, xlab <- age, ylab <- relatives with stomach cancer)
plot( clinic$age_at_initial_pathologic_diagnosis, clinic$number_of_relatives_with_stomach_cancer)
plot( clinic$age_at_initial_pathologic_diagnosis = age, clinic$number_of_relatives_with_stomach_cancer = number)
plot( age= clinic$age_at_initial_pathologic_diagnosis, number = clinic$number_of_relatives_with_stomach_cancer)
plot( clinic$age_at_initial_pathologic_diagnosis, clinic$number_of_relatives_with_stomach_cancer, age, number)
plot( clinic$age_at_initial_pathologic_diagnosis, clinic$number_of_relatives_with_stomach_cancer)
write.csv(clinic, /Users/riapai/Desktop/coad_clinical_data.csv)
write.csv(clinic, //Users/riapai/Desktop/coad_clinical_data.csv)
write.csv(clinic, /Users/riapai/Desktop/coad_clinical_data.csv)
write.csv(clinic, Users/riapai/Desktop/coad_clinical_data.csv)
write.csv(clinic, Users/riapai/Desktop/coad_clinical_data.csv)
write.csv(clinic, "Users/riapai/Desktop/coad_clinical_data.csv")
write.csv(clinic, "Users/riapai/Desktop/coad_clinical_data.csv")
write.csv(clinic, "file.csv")
write.csv(clinic, "/Users/riapai/Desktop/coad_clinical_data.csv")
write.csv(clinic, "/Users/riapai/Desktop/coad_clinical_data.csv")
install.packages("BiocManager")
library(BiocManager)
BiocManager :: install("TCGAbiolinks")
install.packages("BiocManager")
library(BiocManager)
BiocManager :: install("TCGAbiolinks")
install.packages("BiocManager")
library(TCGAbiolinks)
str(clinic)
head( "fill in here" )
colnames(clinic)
clinic$vital_status
clinic$ethnicity #choose another column to look at. When filling in, you can remove the quotation marks
clinic$vital_status[1:5] #this shows the vital_status column for the first 5 patients
head( clinic$vital_status ) #What does this do?
colnames(clinic)
#clinic$vital_status
#clinic$ethnicity #choose another column to look at. When filling in, you can remove the quotation marks
#clinic$vital_status[1:5] #this shows the vital_status column for the first 5 patients
head( clinic$vital_status ) #What does this do?
colnames(clinic)
#clinic$vital_status
#clinic$ethnicity #choose another column to look at. When filling in, you can remove the quotation marks
clinic$vital_status[1:5] #this shows the vital_status column for the first 5 patients
#head( clinic$vital_status ) #What does this do?
colnames(clinic)
#clinic$vital_status
#clinic$ethnicity #choose another column to look at. When filling in, you can remove the quotation marks
print(clinic$vital_status[1:5]) #this shows the vital_status column for the first 5 patients
#head( clinic$vital_status ) #What does this do?
colnames(clinic)
#clinic$vital_status
#clinic$ethnicity #choose another column to look at. When filling in, you can remove the quotation marks
print(clinic$vital_status[1:5]) #this shows the vital_status column for the first 5 patients
#head( clinic$vital_status ) #What does this do?
colnames(clinic)
#clinic$vital_status
head(clinic$ethnicity) #choose another column to look at. When filling in, you can remove the quotation marks
#print(clinic$vital_status[1:5]) #this shows the vital_status column for the first 5 patients
#head( clinic$vital_status ) #What does this do?
colnames(clinic)
#clinic$vital_status
print( head(clinic$ethnicity)) #choose another column to look at. When filling in, you can remove the quotation marks
#print(clinic$vital_status[1:5]) #this shows the vital_status column for the first 5 patients
#head( clinic$vital_status ) #What does this do?
colnames(clinic)
#clinic$vital_status
print( head(clinic$ethnicity)) #choose another column to look at. When filling in, you can remove the quotation marks
#print(clinic$vital_status[1:5]) #this shows the vital_status column for the first 5 patients
#head( clinic$vital_status ) #What does this do?
colnames(clinic)
#clinic$vital_status
print( head(clinic$bcr_patient_uuid) #choose another column to look at. When filling in, you can remove the quotation marks
#print(clinic$vital_status[1:5]) #this shows the vital_status column for the first 5 patients
#head( clinic$vital_status ) #What does this do?
colnames(clinic)
#clinic$vital_status
head(clinic$bcr_patient_uuid) #choose another column to look at.
#print(clinic$vital_status[1:5]) #this shows the vital_status column for the first 5 patients
#head( clinic$vital_status ) #What does this do?
colnames(clinic)
#clinic$vital_status
print(head(clinic$bcr_patient_uuid)) #choose another column to look at.
#print(clinic$vital_status[1:5]) #this shows the vital_status column for the first 5 patients
#head( clinic$vital_status ) #What does this do?
colnames(clinic)
#clinic$vital_status
print(head(clinic$bcr_patient_uuid)) #choose another column to look at.
#print(clinic$vital_status[1:5]) #this shows the vital_status column for the first 5 patients
#head( clinic$vital_status ) #What does this do?
colnames(clinic)
#clinic$vital_status
print(head(clinic$year_of_initial_pathologic_diagnosis)) #choose another column to look at.
#print(clinic$vital_status[1:5]) #this shows the vital_status column for the first 5 patients
#head( clinic$vital_status ) #What does this do?
colnames(clinic)
#clinic$vital_status
print(head(clinic$year_of_initial_pathologic_diagnosis)) #choose another column to look at.
#print(clinic$vital_status[1:5]) #this shows the vital_status column for the first 5 patients
#head( clinic$vital_status ) #What does this do?
plot( clinic$age_at_initial_pathologic_diagnosis, clinic$year_of_initial_pathologic_diagnosis)
plot( x = clinic$age_at_initial_pathologic_diagnosis, y = clinic$year_of_initial_pathologic_diagnosis)
x = "age"
y = "year"
plot( x = clinic$age_at_initial_pathologic_diagnosis, y = clinic$year_of_initial_pathologic_diagnosis)
plot( clinic$age_at_initial_pathologic_diagnosis,clinic$year_of_initial_pathologic_diagnosis)
xlab = "age"
ylab = "year"
plot( clinic$age_at_initial_pathologic_diagnosis,clinic$year_of_initial_pathologic_diagnosis, xlab = "age", ylab = "year")
plot( clinic$age_at_initial_pathologic_diagnosis,clinic$year_of_initial_pathologic_diagnosis, main = "age vs year of initial pathological diagnosis", xlab = "age", ylab = "year of initial pathological diagnosis")
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
par(mar=c(10,1,1,1))
boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = age, ylab = race, main = "age and race of patients with stomach cancer", las = 2, cex.axis = 0.5)
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
#par(mar=c(10,1,1,1))
#boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = age, ylab = race, main = "age and race of patients with stomach cancer", las = 2, cex.axis = 0.5)
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
colnames(clinic)
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
#par(mar=c(10,1,1,1))
#boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = age, ylab = race, main = "age and race of patients with stomach cancer", las = 2, cex.axis = 0.5)
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
par(mar=c(10,1,1,1))
boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = age, ylab = race, main = "age and race of patients with stomach cancer", las = 2, cex.axis = 0.5)
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
par(mar=c(10,1,1,1))
boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = "age", ylab = "race", main = "age and race of patients with stomach cancer", las = 2, cex.axis = 0.5)
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
par(mar=c(10,1,1,50))
boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = "age", ylab = "race", main = "age and race of patients with stomach cancer", las = 2, cex.axis = 0.5)
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
par(mar=c(10,1,1,5))
boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = "age", ylab = "race", main = "age and race of patients with stomach cancer", las = 2, cex.axis = 0.5)
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
par(mar=c(5,1,1,1))
boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = "age", ylab = "race", main = "age and race of patients with stomach cancer", las = 2, cex.axis = 0.5)
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
par(mar=c(5,1,1,1))
boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = "age", ylab = "race", main = "age and race of patients with stomach cancer", las = 1, cex.axis = 0.1)
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
par(mar=c(5,1,1,1))
boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = "age", ylab = "race", main = "age and race of patients with stomach cancer", las = 5, cex.axis = 0.4)
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
par(mar=c(5,1,1,1))
boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = "age", ylab = "race", main = "age and race of patients with stomach cancer", las = 2, cex.axis = 0.4)
unique( clinic$race_list ) #This shows you all the UNIQUE entries of the race column
#the mar argument in par() sets the plot margins. As the race names may be long, we want to have a large bottom margin. par(mar = c(bottom, left, top, right)). How does the plot change if you change these margins?
par(mar=c(5,1,1,1))
boxplot( clinic$age_at_initial_pathologic_diagnosis ~ clinic$race_list, xlab = "age", ylab = "race", main = "age and race of patients with stomach cancer", las = 2, cex.axis = 0.5)
isMissingRace (x) {
isMissingRace (x) {
if( clinic$race_list == "") {
return (TRUE)
}
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == ""  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
if( clinic$race_list == "") {
return TRUE
for (i in clinic$race_list) {
if( clinic$race_list == "") {
return (TRUE)
}
else {
return (FALSE)
}
}
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == ""  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
colnames(clinic)
clinic$race_list
#print(head(clinic$year_of_initial_pathologic_diagnosis)) #choose another column to look at.
#print(clinic$vital_status[1:5]) #this shows the vital_status column for the first 5 patients
#head( clinic$vital_status ) #What does this do?
for (i in 1:69) {
if( clinic$race_list == "") {
}
else {
}
}
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == ""  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
for (i in 1:69) {
if( clinic$race_list == " ") {
}
else {
}
}
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == ""  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
for (i in 1:69) {
ifelse( clinic$race_list == " ") {
for (i in 1:69) {
ifelse( clinic$race_list == " ", "true", "false")
}
isMissingRace (x)
for (i in 1:69) {
ifelse( clinic$race_list == " ", "true", "false")
}
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == ""  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
for (i in 1:69) {
ifelse( clinic$race_list == " ", "true", "false")
}
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == ""  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
for (i in 1:69) {
ifelse ( clinic$race_list == " ", print("true"), print("false"))
}
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == ""  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
count = 0
for (i in 1:69) {
ifelse ( clinic$race_list == " ", print("true"), print("false"))
count = count + 1
}
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == ""  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
count = 0
for (i in 1:69) {
ifelse ( clinic$race_list == " ", print("true"), print("false"))
count = count + 1
}
print(count)
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == ""  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
count = 0
for (i in 1:457) {
ifelse ( clinic$race_list == " ", print("true"), "false")
count = count + 1
}
print(count)
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == " "  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
count = 0
for (i in 1:457) {
ifelse ( clinic$race_list == " ", print("true"), "false")
count = count + 1
}
print(count)
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == " "  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
count = 0
for (i in 1:457) {
ifelse ( clinic$race_list == " ", print("true"), "false")
count = count + 1
}
print(count)
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
#sum( as.numeric( clinic$race_list == " "  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
count = 0
for (col in colnames(clinic$race_list)) {
bool = clinic$race_list == " "
if (TRUE %n% bool) {
print("true")
}
}
print(count)
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == " "  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
count = 0
for (col in colnames(clinic$race_list)) {
print("hello")
bool = clinic$race_list == " "
if (TRUE %n% bool) {
print("true")
}
}
print(count)
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == " "  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
race = clinic$race_list
for (i in 1:nrow(race)) {
print("hello")
bool = race == " "
if (TRUE %n% bool) {
print("true")
}
}
race = clinic$race_list
head(race)
#for (i in 1:nrow(race)) {
#print("hello")
#bool = (race == " ")
#if (TRUE %n% bool) {
#print("true")
#}
#}
print(count)
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == " "  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
race = clinic$race_list
print(head(race))
#for (i in 1:nrow(race)) {
#print("hello")
#bool = (race == " ")
#if (TRUE %n% bool) {
#print("true")
#}
#}
print(count)
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == " "  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
race = clinic$race_list
print(head(race))
#for (i in 1:nrow(race)) {
#print("hello")
#bool = (race == " ")
#if (TRUE %n% bool) {
#print("true")
#}
#}
print(count)
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == " "  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
race = clinic$race_list
print(race [1:10])
#for (i in 1:nrow(race)) {
#print("hello")
#bool = (race == " ")
#if (TRUE %n% bool) {
#print("true")
#}
#}
print(count)
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == " "  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
race = clinic$race_list
print(race [1:10])
#for (i in 1:nrow(race)) {
#print("hello")
#bool = (race == " ")
#if (TRUE %n% bool) {
#print("true")
#}
#}
print(count)
#This returns FALSE when the race is NOT empty and TRUE when the race is empty, hence equal to ""
#You can also count the number of missing race entries
sum( as.numeric( clinic$race_list == " "  )  )
#Remember, the != refers to NOT EQUAL. How many patients HAVE race information? Hint, these patients have race information that does not equal to ""
race = clinic$race_list
print(race [1:10])
lapply(race, isMissingRace(race))
race = clinic$race_list
print(race [1:10])
isMissingRace(x) {
race = clinic$race_list
print(race [1:10])
isMissingRace = function(x) {
if (x == " ") {
print("true")
}
}
lapply(race, isMissingRace(race))
colnames(clinic)
print(clinic$age_at_initial_pathologic_diagnosis)
min(clinic$age_at_initial_pathologic_diagnosis)
lapply, (clinic, min(clinic$age_at_initial_pathologic_diagnosis))
lapply(clinic, min(clinic$age_at_initial_pathologic_diagnosis))
write.csv(clinic, "/Users/riapai/Desktop/coad_clinical_data.csv")
clinic_read_in <- read.csv("file_path/file_name.csv", row.names = 1)
clinic_read_in <- read.csv("/Users/riapai/Desktop/coad_clinical_data.csv", row.names = 1)
surv_object <- Surv( time = clinic$survival_time, event = clinic$death_event  )
install.packages(survival)
install.packages("survival")
install.packages("survival")
install.packages("survminer")
library(survival)
library(survminer)
clinic$survival_time <- ifelse( is.na(clinic$days_todeath == " "), survival = days_to_last_follow_up, survival = clinic$days_to_death  )
clinic$survival_time <- ifelse( is.na(clinic$days_todeath), days_to_last_follow_up, clinic$days_to_death )
