# ignore all of this
knitr::opts_chunk$set(echo = TRUE)
set.seed(0)
rand_nums = runif(10, min = 0, max = 10)
if(!require(pacman)){
install.packages(pacman)
library(pacman)
}
p_load(rbenchmark)
p_load(tidyverse)
theme_set(
theme_bw() +
theme(legend.position = "top")
)
var_string = "red"
var_num <- 3
var_vector = c(1, 2, 3) # a vector -- see more later
var_list = list(var_string, var_vector, 82)  # a list can have basically anything in it
var_string = "red"
var_num <- 3
var_vector = c(1, 2, 3) # a vector -- see more later
var_list = list(var_string, var_vector, 82)  # a list can have basically anything in it
x = 3
age = 18
birthday = "11/02/2002"
x = 3
age = 18
birthday = "11/02/2002"
x = 3
age = 18
birthday = "11/02/2002"
print(age)
print(birthday)
x = 3
age = 18
birthday = noquote("11/02/2002")
print(age)
print(birthday)
x = 5
y = 7
sum(x, y)
print(sum)
x + y  # this is the same
x = 15
y = 7
sum(x, y)
print(sum)
x + y  # this is the same
z = sum(x, y)
z
print(z)
z = sum(x, y)
z
print(z)
rand_nums = c(1, 3, 4, 8, 1, 44, -3)
MIN = min(rand_nums)
MAX = max(rand_nums)
product = MIN * MAX
print(product)
rand_nums = c(1, 3, 4, 8, 1, 44, -3)
MIN = min(rand_nums)
MAX = max(rand_nums)
product = MIN * MAX
cat("product: ", product)
rand_nums = c(1, 3, 4, 8, 1, 44, -3)
MIN = min(rand_nums)
MAX = max(rand_nums)
product = MIN * MAX
cat("product:", product)
graph_parabola = function(a, b, c){
curve(a*x^2 + b*x + c, xlim = c(-5, 5), ylim = c(-5, 5), col = "blue")
# there is no return statement -- the output is in the plot window!
}
graph_parabola(1, 4, 3) # much easier than typing the above code!
quad_form = function(a, b, c){
x = (-b + sqrt((b*b) - (4*a*c)))/(2*a)
return x
quad_form = function(a, b, c){
var_x = (-b + sqrt((b*b) - (4*a*c)))/(2*a)
return (var_x)
}
quad_form = function(a, b, c){
var_x = (-b + sqrt((b*b) - (4*a*c)))/(2*a)
return (var_x)
}
print(quad_form(1,2,3))
quad_form = function(a, b, c){
var_x = (-b + sqrt((b*b) - (4*a*c)))/(2*a)
return (var_x)
}
print(quad_form(3,2,1))
quad_form = function(a, b, c){
var_x = (-b + sqrt((b*b) - (4*a*c)))/(2*a)
return (var_x)
}
print(quad_form(3,10,1))
print("Green eggs and ham.")
if(1 > 2 || "red" == "blue"){
print("I do not like green eggs and ham.")
}
if("red" == "green" || 2 > 1){
print("I do not like them, Sam-I-Am.")
}
if(!(3 != 3 || "pass" == "fail")){
print("I do so like green eggs and ham.")
}
for (i in 1:10){
print(i*10)
}
for (i in 1:5){
print("USC")
}
# code goes here
for (i in 0:9) {
print(10-i)
}
# code goes here
for (i in 10:1) {
print(i)
}
# code goes here
for (i in 10:1) {
print(i)
}
for (i in 0:9) {
print(10 -i)
}
# code goes here
for (i in 1:6) {
for (j in 1:6) {
print(i + j)
}
}
# code goes here
count = 0
for (i in 1:6) {
for (j in 1:6) {
print(i + j)
count = count + 1
print(count)
}
}
# code goes here
count = 0
for (i in 1:6) {
for (j in 1:6) {
sum= i + j
count = count + 1
cat("count:", count, "sum", sum)
}
}
x = 0
while (x > 10) {
x = x + runif(1)
print(x)
}
# code goes here
x = 0
while (x > 10) {
x = x + runif(1)
print(x)
}
# code goes here
x = 0
while (x > 10) {
x = x + runif(1)
print(x)
}
x = 0
while (x > 10) {
x = x + runif(1)
print(x)
}
vals1 = sapply(iris, mean(x){  # you can define your own function here!
vals1 = sapply(iris, min(x){  # you can define your own function here!
install.packages("BiocManager")
library(BiocManager)
BiocManager :: install("TCGAbiolinks")
library(TCGAbiolinks)
getwd(clin_query) #line not working
getwd(TCGAbiolinks) #line not working
getwd() #line not working
str(clinic)
install.packages("BiocManager")
library(BiocManager)
BiocManager :: install("TCGAbiolinks")
library(TCGAbiolinks)
clin_query <- GDCquery(project = "TCGA-STAD", data.category = "Clinical", file.type = "xml")
GDCdownload( clin_query ) #Only use this line ONCE! Comment out after you have downloaded the data.
clinic <- GDCprepare_clinic(clin_query, clinical.info = "patient")
names( clinic )[names(clinic)=="days_to_last_followup"] <- "days_to_last_follow_up" #This fixes an error in the name of the column
getwd(clin_query) #line not working
install.packages("BiocManager")
library(BiocManager)
BiocManager :: install("TCGAbiolinks")
install.packages("BiocManager")
library(TCGAbiolinks)
